import "semoUtil.scrypt";

contract Auction {
    @state
    Ripemd160 fundOrigin;

    Ripemd160 bidder;
    PubKey auctioner;
    int auctionDeadline;

    public function bid(Ripemd160 fundOrigin, int bid, int changeSats, SigHashPreimage txPreimage) {

        require(Tx.checkPreimage(txPreimage));

        int highestBid = Util.value(txPreimage);
        require(bid > highestBid);
        Ripemd160 previousFundOrigin = this.fundOrigin;

        this.fundOrigin = fundOrigin;
        bytes stateScript = this.getStateScript();
        bytes auctionOutput = Util.buildOutput(stateScript, bid);
        bytes refundScript = Util.buildPublicKeyHashScript(previousFundOrigin);
        bytes refundOutput = Util.buildOutput(refundScript, highestBid);
        bytes changeScript = Util.buildPublicKeyHashScript(this.bidder);
        bytes changeOutput = Util.buildOutput(changeScript, changeSats);
        bytes output = auctionOutput + refundOutput + changeOutput;

        require(hash256(output) == Util.hashOutputs(txPreimage));
    }

    public function close(Sig sig, SigHashPreimage txPreimage) {
        require(Tx.checkPreimage(txPreimage));
        require(Util.nLocktime(txPreimage) >= this.auctionDeadline);
        require(checkSig(sig, this.auctioner));
    }
}
